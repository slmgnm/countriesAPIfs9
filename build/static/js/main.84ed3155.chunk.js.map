{"version":3,"sources":["components/Theme.tsx","components/Header.tsx","redux/actions.ts","components/country/Country.tsx","components/Favorite.tsx","components/countries/Countries.tsx","components/searchCountry.tsx","pages/Home.tsx","App.tsx","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["Theme","theme","useTheme","colorMode","useContext","ThemeContext","onClick","toggleColorMode","color","palette","mode","usedStyles","makeStyles","navbarDisplayFlex","display","justifyContent","backgroundColor","navDisplayFlex","linkText","textDecoration","textTransform","width","Header","classes","navigate","useNavigate","AppBar","position","className","Toolbar","Container","maxWidth","IconButton","edge","fontSize","axios","require","default","CURRENT_COUNTRIES","FILTER_COUNTRIES_REGION","FILTER_COUNTRIES_SPECIFIC","DEFAULT_COUNTRIES_SPECIFIC","defaultCountriesSpecific","type","payload","SELECT_COUNTRY","CHANGE_TEXT","changeText","text","ADD_FAVORITE","addFavorite","countryName","REMOVE_FAVORITE","removeFavorite","mapDispatchToProps","selectCountry","country","connect","state","currentCountry","useParams","useState","borders","setBorders","useEffect","get","then","res","data","undefined","boarderingList","forEach","border","push","name","length","region","Button","variant","sx","padding","marginRight","Typography","typography","Box","backgroundImage","flags","backgroundSize","backgroundPosition","height","boxShadow","common","fontWeight","opacity","nativeName","Object","keys","languages","population","subregion","capital","tld","currencies","marginRigth","map","href","favoriteCountries","dispatch","a","textAlign","paddingBottom","Grid","container","spacing","id","index","item","xs","sm","md","lg","alignItems","flexWrap","Card","Link","underline","CardMedia","component","image","alt","borderBottom","CardContent","gutterBottom","textToSearch","textToFilter","favorites","countries","filterCountries","countriesToShow","includes","style","filterCountriesRegion","url","filterCountriesSpecific","selectCurrentCountries","setRegion","TextField","m","margin","placeholder","value","onChange","event","target","InputProps","startAdornment","InputAdornment","FormControl","InputLabel","Select","labelId","label","toLowerCase","MenuItem","currentCountries","console","log","React","createContext","myTheme","setTheme","setMode","useMemo","prevMode","createTheme","Provider","ThemeProvider","CssBaseline","path","element","to","INITIAL_STATE","rootReducer","combineReducers","regex","RegExp","filter","c","test","filteredCountries","filteredFavorites","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","storeFactory","document","getElementById"],"mappings":"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","file":"static/js/main.84ed3155.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\nimport { ThemeContext } from \"../App\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport DarkModeTwoTone from \"@mui/icons-material/DarkModeTwoTone\";\r\nimport LightModeTwoTone from \"@mui/icons-material/LightModeTwoTone\";\r\n\r\nexport default function Theme() {\r\n  const theme = useTheme();\r\n  const colorMode = useContext(ThemeContext);\r\n\r\n  return (\r\n    <IconButton\r\n      onClick={colorMode.toggleColorMode}\r\n      color=\"inherit\"\r\n      aria-label=\"toggle-dark-mode\"\r\n    >\r\n      {theme.palette.mode === \"dark\" ? (\r\n        <LightModeTwoTone />\r\n      ) : (\r\n        <DarkModeTwoTone />\r\n      )}\r\n    </IconButton>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  makeStyles,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TravelExploreRoundedIcon from \"@mui/icons-material/TravelExploreRounded\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport Theme from \"./Theme\";\r\n\r\nconst usedStyles = makeStyles({\r\n  navbarDisplayFlex: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    backgroundColor: \"#212121\",\r\n  },\r\n  navDisplayFlex: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  linkText: {\r\n    textDecoration: \"none\",\r\n    textTransform: \"uppercase\",\r\n    width: \"90px\",\r\n    // color: \"white\",\r\n  },\r\n});\r\n\r\nconst Header = () => {\r\n  const classes = usedStyles();\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position='static' className={classes.navbarDisplayFlex}>\r\n        <Toolbar>\r\n          <Container maxWidth='lg' className={classes.navbarDisplayFlex}>\r\n            <IconButton\r\n              edge='start'\r\n              color='inherit'\r\n              aria-label='earth'\r\n              onClick={() => navigate(\"/home\")}\r\n            >\r\n              <TravelExploreRoundedIcon fontSize='large' />\r\n            </IconButton>\r\n            <IconButton\r\n              edge='start'\r\n              color='inherit'\r\n              aria-label='earth'\r\n              onClick={() => navigate(\"/favorite\")}\r\n            >\r\n              <FavoriteIcon fontSize='large' />\r\n            </IconButton>\r\n            <Theme />\r\n          </Container>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const axios = require(\"axios\").default;\r\ninterface ICountrie {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\n\r\nexport const CURRENT_COUNTRIES = \"CURRENT_COUNTRIES\";\r\nexport function currentCountries(url: string) {\r\n  return async (\r\n    dispatch: (arg0: { type: string; payload: ICountrie[] }) => void\r\n  ) => {\r\n    const countries = await axios.get(url);\r\n    dispatch({\r\n      type: CURRENT_COUNTRIES,\r\n      payload: countries.data,\r\n    });\r\n  };\r\n}\r\n\r\nexport const FILTER_COUNTRIES_REGION = \"FILTER_COUNTRIES_REGION\";\r\nexport function filterCountriesRegion(region: string) {\r\n  return async (\r\n    dispatch: (arg0: { type: string; payload: ICountrie[] }) => void\r\n  ) => {\r\n    let url = `https://restcountries.com/v3/region/${region}?fields=name,population,flags,region,capital`;\r\n    if (region === \"all\") {\r\n      url = `https://restcountries.com/v3/all?fields=name,population,flags,region,capital`;\r\n    }\r\n    const countries = await axios.get(url);\r\n    dispatch({\r\n      type: FILTER_COUNTRIES_REGION,\r\n      payload: countries.data,\r\n    });\r\n  };\r\n}\r\n\r\nexport const FILTER_COUNTRIES_SPECIFIC = \"FILTER_COUNTRIES_SPECIFIC\";\r\nexport function filterCountriesSpecific(text: string, countries: ICountry[]) {\r\n  return {\r\n    type: FILTER_COUNTRIES_SPECIFIC,\r\n    payload: { text, countries },\r\n  };\r\n}\r\n\r\nexport const DEFAULT_COUNTRIES_SPECIFIC = \"DEFAULT_COUNTRIES_SPECIFIC\";\r\nexport function defaultCountriesSpecific() {\r\n  return {\r\n    type: DEFAULT_COUNTRIES_SPECIFIC,\r\n    payload: \"\",\r\n  };\r\n}\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\nexport const SELECT_COUNTRY = \"SELECT_COUNTRY\";\r\nexport function selectCountry(country: ICountry) {\r\n  return {\r\n    type: SELECT_COUNTRY,\r\n    payload: country,\r\n  };\r\n}\r\n\r\nexport const CHANGE_TEXT = \"CHANGE_TEXT\";\r\nexport function changeText(text: string) {\r\n  // console.log(text);\r\n  return {\r\n    type: CHANGE_TEXT,\r\n    payload: text,\r\n  };\r\n}\r\n\r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport function addFavorite(countryName: string) {\r\n  return {\r\n    type: ADD_FAVORITE,\r\n    payload: countryName,\r\n  };\r\n}\r\nexport const REMOVE_FAVORITE = \"REMOVE_FAVORITE\";\r\nexport function removeFavorite(countryName: string) {\r\n  return {\r\n    type: REMOVE_FAVORITE,\r\n    payload: countryName,\r\n  };\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectCountry } from \"../../redux/actions\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { Container, Button, Typography, Box } from \"@mui/material/\";\r\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\r\nimport \"../../index.css\";\r\nconst axios = require(\"axios\").default;\r\ninterface ICountry  {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n};\r\ninterface IProps {\r\n  country: ICountry;\r\n  selectCountry: (arg: ICountry) => void;\r\n}\r\nconst Country: React.FC<IProps> = ({ selectCountry, country }) => {\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const currentCountry = params.country;\r\n  const [borders, setBorders] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://restcountries.com/v3/name/${currentCountry}?fields=name,population,flags,tld,currencies,languages,borders,region,subregion,capital,`\r\n      )\r\n      .then((res: any) => selectCountry(res.data[0]));\r\n  }, []);\r\n  useEffect(() => {\r\n    if (country.borders !== undefined) {\r\n      let boarderingList: any = [];\r\n      country.borders.forEach((border: string) => {\r\n        axios\r\n          .get(`https://restcountries.com/v2/alpha?codes=${border}`)\r\n          .then((res: any) => boarderingList.push(res.data[0].name))\r\n          .then(() => {\r\n            if (boarderingList.length === country.borders.length) {\r\n              setBorders(boarderingList);\r\n            }\r\n          });\r\n      });\r\n    }\r\n  }, [country]);\r\n  return (\r\n    <>\r\n      <Header />\r\n      {country.region === undefined ? null : (\r\n        <Container maxWidth=\"lg\" className=\"container\">\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{ padding: \"5px 20px\" }}\r\n            onClick={() => navigate(\"/\")}\r\n          >\r\n            <KeyboardBackspaceIcon sx={{ marginRight: \"10px\" }} />\r\n            <Typography\r\n            \r\n              sx={{\r\n                typography: \"body2\",\r\n                textTransform: \"none\",\r\n              }}\r\n            >\r\n              Back\r\n            </Typography>\r\n          </Button>\r\n          <Box className=\"box-individual-country\">\r\n            <Box\r\n              className=\"img-country\"\r\n              sx={{\r\n                backgroundImage: `url(\"${country.flags[1]}\")`,\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center\",\r\n                width: \"45%\",\r\n                height: \"400\",\r\n                boxShadow: 3,\r\n              }}\r\n            ></Box>\r\n            <Box>\r\n              <Typography variant=\"h2\" className=\"countryName\" >\r\n                {country.name.common}\r\n              </Typography>\r\n              <Box >\r\n                <Box className=\"info-ul-1\">\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                    className=\"info-ul-p\"\r\n                  >\r\n                    Native Name:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                    className=\"info-ul-p\"\r\n                  >\r\n                    {\r\n                      country.name.nativeName[Object.keys(country.languages)[0]]\r\n                        .common\r\n                    }\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                    className=\"info-ul-p\"\r\n                  >\r\n                    Population:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                    className=\"info-ul-p\"\r\n                  >\r\n                    {country.population}\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Region:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                    className='info-ul-p'\r\n                  >\r\n                    {country.region}\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Sub region:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                  >\r\n                    {country.subregion}\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Capital:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                  >\r\n                    {country.capital[0]}\r\n                  </Typography>\r\n                </Box>\r\n                <Box className=\"info-ul-2\">\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Top Level Domain:{\" \"}\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                  >\r\n                    {country.tld[0]}\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Currencies:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                  >\r\n                    {\r\n                      country.currencies[Object.keys(country.currencies)[0]]\r\n                        .name\r\n                    }\r\n                  </Typography>\r\n                  <br />\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Languages:\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                    variant=\"body2\"\r\n                  >\r\n                    {country.languages[Object.keys(country.languages)[0]]}\r\n                  </Typography>\r\n                </Box>\r\n                <Box className=\"border-countries\">\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    sx={{\r\n                      display: \"inline\",\r\n                      fontWeight: \"bold\",\r\n                      opacity: \"0.9\",\r\n                    }}\r\n                  >\r\n                    Border Countries:\r\n                  </Typography>\r\n                  <Box>\r\n                    {country.borders.length === 0 ? (\r\n                      <Button\r\n                        sx={{ marginRigth: \"5px\" }}\r\n                        variant=\"contained\"\r\n                        className=\"btn-border\"\r\n                      >\r\n                        No countries\r\n                      </Button>\r\n                    ) : null}\r\n\r\n                    {borders.map((border) => {\r\n                      return (\r\n                        <Button\r\n                          sx={{ marginRigth: \"5px\" }}\r\n                          variant=\"contained\"\r\n                          className=\"btn-border\"\r\n                          href={`/${border}`}\r\n                          key={border}\r\n                        >\r\n                          {border}\r\n                        </Button>\r\n                      );\r\n                    })}\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\ninterface IState {\r\n  currentCountry?: any;\r\n  favoriteCountries?: { favoriteCountries: IProps; favorites: string[] };\r\n  filterCountriesSpecific?: [];\r\n  selectCurrentCountries?: IProps;\r\n  textToFilter?: string;\r\n}\r\nconst mapDispatchToProps = {\r\n  selectCountry,\r\n};\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    country: state.currentCountry,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Country);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addFavorite, removeFavorite } from \"../redux/actions\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardMedia,\r\n  Grid,\r\n  Link,\r\n  Typography,\r\n  CardContent,\r\n} from \"@mui/material/\";\r\n// import { ICountries } from \"./interfaces\";\r\n\r\ninterface IProps {\r\n  favoriteCountries: {\r\n    capital: string[];\r\n    flags: string[];\r\n    name: {\r\n      common: string;\r\n      nativeName: any;\r\n      official: string;\r\n    };\r\n    population: number;\r\n    region: string;\r\n  }[];\r\n}\r\nconst Favorite: React.FC<IProps> = ({ favoriteCountries }) => {\r\n  return (\r\n    <>\r\n      <Container className='container'>\r\n        <Typography\r\n          textAlign='center'\r\n          paddingBottom={10}\r\n          variant='h4'\r\n          sx={{\r\n            fontWeight: \"bold\",\r\n            opacity: \"0.9\",\r\n          }}\r\n        >\r\n          Favorites\r\n        </Typography>\r\n        <Grid container spacing={8} id='countries'>\r\n          {favoriteCountries?.map((country, index) => (\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={6}\r\n              md={4}\r\n              lg={3}\r\n              key={index}\r\n              sx={{\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                flexWrap: \"wrap\",\r\n              }}\r\n            >\r\n              <Card key={index}>\r\n                <Link\r\n                  href={`/${country.name.common}`}\r\n                  underline='none'\r\n                  key={country.name.common}\r\n                >\r\n                  <CardMedia\r\n                    component='img'\r\n                    image={country.flags[1]}\r\n                    alt={`${country.name.common} flag`}\r\n                    height='170px'\r\n                    sx={{ borderBottom: \"1px solid #dbd6d6\" }}\r\n                  />{\" \"}\r\n                </Link>\r\n                <CardContent>\r\n                  <Typography\r\n                    className='info-ul-p'\r\n                    gutterBottom\r\n                    variant='h3'\r\n                    sx={{ fontWeight: \"bold\", fontSize: \"19px\" }}\r\n                  >\r\n                    {country.name.common}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return { favoriteCountries: state.favoriteCountries.favoriteCountries };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  addFavorite: (a: string) => dispatch(addFavorite(a)),\r\n  removeFavorite,\r\n});\r\n\r\nexport default connect<IProps>(mapStateToProps, mapDispatchToProps)(Favorite);\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  Link,\r\n  Button,\r\n} from \"@mui/material/\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  defaultCountriesSpecific,\r\n  changeText,\r\n  addFavorite,\r\n  removeFavorite,\r\n} from \"../../redux/actions\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n// import Country from \"../country/Country\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"./style.css\";\r\n// import { useTheme } from \"@mui/material\";\r\n\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName: {\r\n      msa: {\r\n        official: string;\r\n        common: string;\r\n      };\r\n    };\r\n  };\r\n  capital: string[];\r\n  region: string;\r\n  population: number;\r\n}\r\n\r\nfunction Countries({\r\n  countries,\r\n  filterCountries,\r\n  defaultCountriesSpecific,\r\n  changeText,\r\n  textToSearch,\r\n  addFavorite,\r\n  favorites,\r\n  removeFavorite,\r\n}: any) {\r\n  useEffect(() => {\r\n    defaultCountriesSpecific();\r\n    changeText(\"\");\r\n  }, [countries]);\r\n  let countriesToShow = [];\r\n  filterCountries.length === 0\r\n    ? (countriesToShow = countries)\r\n    : (countriesToShow = filterCountries);\r\n\r\n  return textToSearch.length > 0 && filterCountries.length === 0 ? (\r\n    <Container maxWidth='lg'>\r\n      <Typography variant='body1' sx={{ fontWeight: \"bold\", fontSize: \"19px\" }}>\r\n        Not available\r\n      </Typography>\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <Grid container spacing={8} id='countries'>\r\n        {countriesToShow.map((country: ICountry, index: number) => {\r\n          return (\r\n            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\r\n              <Card>\r\n                <Link\r\n                  href={`/${country.name.common}`}\r\n                  underline='none'\r\n                  key={country.name.common}\r\n                >\r\n                  <CardMedia\r\n                    component='img'\r\n                    image={country.flags[1]}\r\n                    alt={`${country.name.common} flag`}\r\n                    height='170px'\r\n                    sx={{ borderBottom: \"1px solid #dbd6d6\" }}\r\n                  />\r\n                </Link>\r\n\r\n                <CardContent>\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant='h3'\r\n                    sx={{ fontWeight: \"bold\", fontSize: \"19px\" }}\r\n                  >\r\n                    {country.name.common}\r\n                  </Typography>\r\n                  <Box>\r\n                    <Typography\r\n                      variant='subtitle2'\r\n                      sx={{\r\n                        display: \"inline\",\r\n                        fontWeight: \"bold\",\r\n                        opacity: \"0.9\",\r\n                      }}\r\n                    >\r\n                      Population:\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                      variant='body2'\r\n                    >\r\n                      {country.population}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography\r\n                      variant='subtitle2'\r\n                      sx={{\r\n                        display: \"inline\",\r\n                        fontWeight: \"bold\",\r\n                        opacity: \"0.9\",\r\n                      }}\r\n                    >\r\n                      Region:\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                      variant='body2'\r\n                    >\r\n                      {country.region}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography\r\n                      variant='subtitle2'\r\n                      sx={{\r\n                        display: \"inline\",\r\n                        fontWeight: \"bold\",\r\n                        opacity: \"0.9\",\r\n                      }}\r\n                    >\r\n                      Capital:\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                      variant='body2'\r\n                    >\r\n                      {country.capital[0]}\r\n                      {favorites?.includes(country.name.common) ? (\r\n                        <Button\r\n                          onClick={() => {\r\n                            removeFavorite(country.name.common);\r\n                          }}\r\n                          style={{ color: \"red\" }}\r\n                        >\r\n                          <FavoriteIcon />\r\n                        </Button>\r\n                      ) : (\r\n                        <Button\r\n                          onClick={() => {\r\n                            addFavorite(country);\r\n                          }}\r\n                        >\r\n                          <FavoriteBorderIcon />\r\n                        </Button>\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  textToSearch: state.textToFilter,\r\n  favoriteCountries: state.favoriteCountries.favoriteCountries,\r\n  favorites: state.favoriteCountries.favorites,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (arg: any) => null) => ({\r\n  addFavorite: (country: ICountry | any) => dispatch(addFavorite(country)),\r\n  removeFavorite: (country: ICountry | any) =>\r\n    dispatch(removeFavorite(country)),\r\n  defaultCountriesSpecific,\r\n  changeText,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Countries);\r\n","import React, { useState } from \"react\";\r\nimport { connect, DefaultRootState, MapStateToPropsParam } from \"react-redux\";\r\nimport {\r\n  filterCountriesRegion,\r\n  filterCountriesSpecific,\r\n  changeText,\r\n} from \"../redux/actions\";\r\nimport {\r\n  Container,\r\n  InputAdornment,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material/\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { SelectChangeEvent } from \"@mui/material/Select/Select\";\r\n\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\ninterface IProps {\r\n  changeText: (arg: string) => void;\r\n  filterCountriesSpecific: (arga: string, argb: ICountry[]) => void;\r\n  filterCountriesRegion: (arg: string) => void;\r\n  textToSearch?: string;\r\n  countries: ICountry[];\r\n}\r\nconst SearchCountry = ({\r\n  filterCountriesSpecific,\r\n  filterCountriesRegion,\r\n  countries,\r\n  changeText,\r\n  textToSearch,\r\n}: IProps) => {\r\n  const [region, setRegion] = useState(\"All\");\r\n  const handleChangeCountry = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    changeText(event.target.value);\r\n    filterCountriesSpecific(event.target.value, countries);\r\n  };\r\n  const handleChangeRegion = (event: SelectChangeEvent) => {\r\n    setRegion(event.target.value);\r\n    filterCountriesRegion(event.target.value.toLowerCase());\r\n  };\r\n  return (\r\n    <Container\r\n      maxWidth=\"lg\"\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n      }}\r\n    >\r\n      <TextField\r\n        variant=\"outlined\"\r\n        id=\"search-country\"\r\n        sx={{ m: 1, width: \"400px\", margin: \"50px 0\", marginRight: \"20px\" }}\r\n        placeholder=\"Search for a country...\"\r\n        value={textToSearch}\r\n        onChange={handleChangeCountry}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n      <FormControl sx={{ width: \"250px\" }}>\r\n        <InputLabel id=\"region-simple-select-label\">\r\n          Filter by Region\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"region-simple-select-label\"\r\n          id=\"simple-select-region\"\r\n          value={region}\r\n          label=\"Filter by Region\"\r\n          onChange={handleChangeRegion}\r\n        >\r\n          <MenuItem value={\"Africa\"}>Africa</MenuItem>\r\n          <MenuItem value={\"Americas\"}>Americas</MenuItem>\r\n          <MenuItem value={\"Asia\"}>Asia</MenuItem>\r\n          <MenuItem value={\"Europe\"}>Europe</MenuItem>\r\n          <MenuItem value={\"Oceania\"}>Oceania</MenuItem>\r\n          <MenuItem value={\"All\"}>All</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    countries: state.selectCurrentCountries,\r\n    textToSearch: state.textToFilter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps: {\r\n  changeText: (arg: string) => void;\r\n  filterCountriesSpecific: (arga: string, argb: ICountry[]) => void;\r\n  filterCountriesRegion: (arg: string) => void;\r\n} = {\r\n  filterCountriesRegion,\r\n  filterCountriesSpecific,\r\n  changeText,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchCountry);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { currentCountries } from \"../redux/actions\";\r\n// import { Button } from \"@mui/material\";\r\n// import AppBar from \"./AppBar.jsx\";\r\nimport CurrentCountries from \"../components/countries/Countries\";\r\nimport SearchCountry from \"../components/searchCountry\";\r\n\r\nimport Header from \"../components/Header\";\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\n\r\ninterface IProps {\r\n  currentCountries: any;\r\n  countries: any;\r\n  filterCountries:  (arga: string, argb: ICountry[]) => void;\r\n}\r\nconst Home = ({ currentCountries, countries, filterCountries }: IProps) => {\r\n    console.log({ currentCountries, countries, filterCountries });\r\n  useEffect(() => {\r\n    currentCountries(\r\n      \"https://restcountries.com/v3/all?fields=name,population,flags,region,capital\"\r\n    );\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <SearchCountry />\r\n      <CurrentCountries\r\n        countries={countries}\r\n        filterCountries={filterCountries}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    countries: state.selectCurrentCountries,\r\n    filterCountries: state.filterCountriesSpecific,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  currentCountries,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { Navigate } from \"react-router-dom\";\nimport Country from \"./components/country/Country\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport { Paper } from \"@material-ui/core\";\nimport { PaletteType } from \"@material-ui/core\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport FavoriteComp from \"./components/Favorite\";\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\nfunction App() {\n  const [mode, setMode] = React.useState(\"dark\");\n\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === \"light\" ? \"dark\" : \"light\"));\n      },\n    }),\n    []\n  );\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: mode as PaletteType,\n        },\n      }),\n    [mode]\n  );\n  return (\n    <ThemeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        \n          <CssBaseline />\n          <Routes>\n            <Route path='/' element={<Navigate to={\"/home\"}></Navigate>} />\n            <Route path='/home' element={<Home />} />\n            <Route path='/:country' element={<Country />} />\n            <Route\n              path='/favorite'\n              element={\n                <>\n                  <Header />\n                  <FavoriteComp />\n                </>\n              }\n            />\n          </Routes>\n        \n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    myTheme: state.setTheme,\n  };\n};\nexport const ThemeContext = React.createContext({ toggleColorMode: () => {} });\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  ADD_FAVORITE,\r\n  CHANGE_TEXT,\r\n  CURRENT_COUNTRIES,\r\n  DEFAULT_COUNTRIES_SPECIFIC,\r\n  FILTER_COUNTRIES_REGION,\r\n  FILTER_COUNTRIES_SPECIFIC,\r\n  REMOVE_FAVORITE,\r\n  SELECT_COUNTRY,\r\n} from \"./actions\";\r\n\r\nconst INITIAL_STATE = {\r\n  favoriteCountries: [],\r\n  favorites: [],\r\n\r\n};\r\ninterface ICountrie {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\nfunction selectCurrentCountries(\r\n  state = [],\r\n  { type, payload }: { type: string; payload: ICountrie[] }\r\n) {\r\n  switch (type) {\r\n    case CURRENT_COUNTRIES:\r\n      return payload;\r\n    case FILTER_COUNTRIES_REGION:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction filterCountriesSpecific(\r\n  state = [],\r\n  {\r\n    type,\r\n    payload,\r\n  }: { type: string; payload: { text: string; countries: ICountrie[] } }\r\n) {\r\n  switch (type) {\r\n    case FILTER_COUNTRIES_SPECIFIC:\r\n      let regex = new RegExp(`^${payload.text}`, \"gim\");\r\n      let filterCountries = payload.countries.filter((c) =>\r\n        regex.test(c.name.common)\r\n      );\r\n      return filterCountries;\r\n    case DEFAULT_COUNTRIES_SPECIFIC:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\n\r\nfunction currentCountry(\r\n  state = {},\r\n  { type, payload }: { type: string; payload: ICountry }\r\n) {\r\n  switch (type) {\r\n    case SELECT_COUNTRY:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction textToFilter(\r\n  state = \"\",\r\n  { type, payload }: { type: string; payload: string }\r\n) {\r\n  switch (type) {\r\n    case CHANGE_TEXT:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction favoriteCountries(\r\n  state = INITIAL_STATE,\r\n  { type, payload }: { type: string; payload: ICountrie }\r\n) {\r\n  // console.log(\"PAYLOAD:\", payload);\r\n  switch (type) {\r\n    case ADD_FAVORITE:\r\n      const favoriteCountries: ICountrie[] = [...state.favoriteCountries];\r\n      const favorites: string[] = [...state.favorites];\r\n      favoriteCountries.push(payload);\r\n      favorites.push(payload.name.common);\r\n      return {\r\n        ...state,\r\n        favoriteCountries,\r\n        favorites,\r\n      };\r\n    case REMOVE_FAVORITE:\r\n      const filteredCountries = [...state.favoriteCountries].filter(\r\n        (country: any) => country.name.common !== payload\r\n      );\r\n      console.log(\"filteredCountries:\",filteredCountries);\r\n\r\n      const filteredFavorites = [...state.favorites].filter(\r\n        (country) => country !== payload\r\n      );\r\n      return {\r\n        ...state,\r\n        favoriteCountries: filteredCountries,\r\n        favorites: filteredFavorites,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  selectCurrentCountries,\r\n  filterCountriesSpecific,\r\n  currentCountry,\r\n  textToFilter,\r\n  favoriteCountries,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport storeFactory from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={storeFactory}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}