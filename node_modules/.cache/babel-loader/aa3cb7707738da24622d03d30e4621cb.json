{"ast":null,"code":"import React,{useEffect}from\"react\";import{Container,Card,CardMedia,CardContent,Typography,Grid,Box,Link,Button}from\"@mui/material/\";import{connect}from\"react-redux\";import{defaultCountriesSpecific,changeText,addFavorite as _addFavorite,removeFavorite as _removeFavorite}from\"../../redux/actions\";import FavoriteBorderIcon from\"@mui/icons-material/FavoriteBorder\";import FavoriteIcon from\"@mui/icons-material/Favorite\";// import Country from \"../country/Country\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"./style.css\";\n// import { useTheme } from \"@mui/material\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Countries(_ref){var countries=_ref.countries,filterCountries=_ref.filterCountries,defaultCountriesSpecific=_ref.defaultCountriesSpecific,changeText=_ref.changeText,textToSearch=_ref.textToSearch,addFavorite=_ref.addFavorite,favorites=_ref.favorites,removeFavorite=_ref.removeFavorite;useEffect(function(){defaultCountriesSpecific();changeText(\"\");},[countries]);var countriesToShow=[];filterCountries.length===0?countriesToShow=countries:countriesToShow=filterCountries;return textToSearch.length>0&&filterCountries.length===0?/*#__PURE__*/_jsx(Container,{maxWidth:\"lg\",children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",sx:{fontWeight:\"bold\",fontSize:\"19px\"},children:\"Not available\"})}):/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Grid,{container:true,spacing:8,id:\"countries\",children:countriesToShow.map(function(country,index){return/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,md:4,lg:3,children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Link,{href:\"/\".concat(country.name.common),underline:\"none\",children:/*#__PURE__*/_jsx(CardMedia,{component:\"img\",image:country.flags[1],alt:\"\".concat(country.name.common,\" flag\"),height:\"170px\",sx:{borderBottom:\"1px solid #dbd6d6\"}})},country.name.common),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{gutterBottom:true,variant:\"h3\",sx:{fontWeight:\"bold\",fontSize:\"19px\"},children:country.name.common}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",sx:{display:\"inline\",fontWeight:\"bold\",opacity:\"0.9\"},children:\"Population:\"}),/*#__PURE__*/_jsx(Typography,{sx:{display:\"inline\",opacity:\"0.7\"},variant:\"body2\",children:country.population})]}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",sx:{display:\"inline\",fontWeight:\"bold\",opacity:\"0.9\"},children:\"Region:\"}),/*#__PURE__*/_jsx(Typography,{sx:{display:\"inline\",opacity:\"0.7\"},variant:\"body2\",children:country.region})]}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",sx:{display:\"inline\",fontWeight:\"bold\",opacity:\"0.9\"},children:\"Capital:\"}),/*#__PURE__*/_jsxs(Typography,{sx:{display:\"inline\",opacity:\"0.7\"},variant:\"body2\",children:[country.capital[0],(favorites===null||favorites===void 0?void 0:favorites.includes(country.name.common))?/*#__PURE__*/_jsx(Button,{onClick:function onClick(){removeFavorite(country.name.common);},style:{color:\"red\"},children:/*#__PURE__*/_jsx(FavoriteIcon,{})}):/*#__PURE__*/_jsx(Button,{onClick:function onClick(){addFavorite(country);},children:/*#__PURE__*/_jsx(FavoriteBorderIcon,{})})]})]})]})]})},index);})})});}var mapStateToProps=function mapStateToProps(state){return{textToSearch:state.textToFilter,favoriteCountries:state.favoriteCountries.favoriteCountries,favorites:state.favoriteCountries.favorites};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{addFavorite:function addFavorite(country){return dispatch(_addFavorite(country));},removeFavorite:function removeFavorite(country){return dispatch(_removeFavorite(country));},defaultCountriesSpecific:defaultCountriesSpecific,changeText:changeText};};export default connect(mapStateToProps,mapDispatchToProps)(Countries);","map":{"version":3,"sources":["C:/Users/salee/countriesAPIfs9/src/components/countries/Countries.tsx"],"names":["React","useEffect","Container","Card","CardMedia","CardContent","Typography","Grid","Box","Link","Button","connect","defaultCountriesSpecific","changeText","addFavorite","removeFavorite","FavoriteBorderIcon","FavoriteIcon","Countries","countries","filterCountries","textToSearch","favorites","countriesToShow","length","fontWeight","fontSize","map","country","index","name","common","flags","borderBottom","display","opacity","population","region","capital","includes","color","mapStateToProps","state","textToFilter","favoriteCountries","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  Link,\r\n  Button,\r\n} from \"@mui/material/\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  defaultCountriesSpecific,\r\n  changeText,\r\n  addFavorite,\r\n  removeFavorite,\r\n} from \"../../redux/actions\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n// import Country from \"../country/Country\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"./style.css\";\r\n// import { useTheme } from \"@mui/material\";\r\n\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName: {\r\n      msa: {\r\n        official: string;\r\n        common: string;\r\n      };\r\n    };\r\n  };\r\n  capital: string[];\r\n  region: string;\r\n  population: number;\r\n}\r\n\r\nfunction Countries({\r\n  countries,\r\n  filterCountries,\r\n  defaultCountriesSpecific,\r\n  changeText,\r\n  textToSearch,\r\n  addFavorite,\r\n  favorites,\r\n  removeFavorite,\r\n}: any) {\r\n  useEffect(() => {\r\n    defaultCountriesSpecific();\r\n    changeText(\"\");\r\n  }, [countries]);\r\n  let countriesToShow = [];\r\n  filterCountries.length === 0\r\n    ? (countriesToShow = countries)\r\n    : (countriesToShow = filterCountries);\r\n\r\n  return textToSearch.length > 0 && filterCountries.length === 0 ? (\r\n    <Container maxWidth='lg'>\r\n      <Typography variant='body1' sx={{ fontWeight: \"bold\", fontSize: \"19px\" }}>\r\n        Not available\r\n      </Typography>\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <Grid container spacing={8} id='countries'>\r\n        {countriesToShow.map((country: ICountry, index: number) => {\r\n          return (\r\n            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\r\n              <Card>\r\n                <Link\r\n                  href={`/${country.name.common}`}\r\n                  underline='none'\r\n                  key={country.name.common}\r\n                >\r\n                  <CardMedia\r\n                    component='img'\r\n                    image={country.flags[1]}\r\n                    alt={`${country.name.common} flag`}\r\n                    height='170px'\r\n                    sx={{ borderBottom: \"1px solid #dbd6d6\" }}\r\n                  />\r\n                </Link>\r\n\r\n                <CardContent>\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant='h3'\r\n                    sx={{ fontWeight: \"bold\", fontSize: \"19px\" }}\r\n                  >\r\n                    {country.name.common}\r\n                  </Typography>\r\n                  <Box>\r\n                    <Typography\r\n                      variant='subtitle2'\r\n                      sx={{\r\n                        display: \"inline\",\r\n                        fontWeight: \"bold\",\r\n                        opacity: \"0.9\",\r\n                      }}\r\n                    >\r\n                      Population:\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                      variant='body2'\r\n                    >\r\n                      {country.population}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography\r\n                      variant='subtitle2'\r\n                      sx={{\r\n                        display: \"inline\",\r\n                        fontWeight: \"bold\",\r\n                        opacity: \"0.9\",\r\n                      }}\r\n                    >\r\n                      Region:\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                      variant='body2'\r\n                    >\r\n                      {country.region}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography\r\n                      variant='subtitle2'\r\n                      sx={{\r\n                        display: \"inline\",\r\n                        fontWeight: \"bold\",\r\n                        opacity: \"0.9\",\r\n                      }}\r\n                    >\r\n                      Capital:\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{ display: \"inline\", opacity: \"0.7\" }}\r\n                      variant='body2'\r\n                    >\r\n                      {country.capital[0]}\r\n                      {favorites?.includes(country.name.common) ? (\r\n                        <Button\r\n                          onClick={() => {\r\n                            removeFavorite(country.name.common);\r\n                          }}\r\n                          style={{ color: \"red\" }}\r\n                        >\r\n                          <FavoriteIcon />\r\n                        </Button>\r\n                      ) : (\r\n                        <Button\r\n                          onClick={() => {\r\n                            addFavorite(country);\r\n                          }}\r\n                        >\r\n                          <FavoriteBorderIcon />\r\n                        </Button>\r\n                      )}\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  textToSearch: state.textToFilter,\r\n  favoriteCountries: state.favoriteCountries.favoriteCountries,\r\n  favorites: state.favoriteCountries.favorites,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (arg: any) => null) => ({\r\n  addFavorite: (country: ICountry | any) => dispatch(addFavorite(country)),\r\n  removeFavorite: (country: ICountry | any) =>\r\n    dispatch(removeFavorite(country)),\r\n  defaultCountriesSpecific,\r\n  changeText,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Countries);\r\n"]},"metadata":{},"sourceType":"module"}