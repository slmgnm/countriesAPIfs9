{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salee\\\\countriesAPIfs9\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { Navigate } from \"react-router-dom\";\nimport Country from \"./components/country/Country\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport FavoriteComp from \"./components/Favorite\";\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [mode, setMode] = React.useState(\"dark\");\n  const colorMode = React.useMemo(() => ({\n    toggleColorMode: () => {\n      setMode(prevMode => prevMode === \"light\" ? \"dark\" : \"light\");\n    }\n  }), []);\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode: mode\n    }\n  }), [mode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: colorMode,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:country\",\n          element: /*#__PURE__*/_jsxDEV(Country, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/favorite\",\n          element: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(FavoriteComp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"JBrsToO8CgNNR6W975vCZAb5vaI=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    myTheme: state.setTheme\n  };\n};\n\nexport const ThemeContext = /*#__PURE__*/React.createContext({\n  toggleColorMode: () => {}\n});\nexport default connect(mapStateToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/salee/countriesAPIfs9/src/App.tsx"],"names":["React","connect","Route","Routes","Navigate","Country","ThemeProvider","createTheme","CssBaseline","FavoriteComp","Home","Header","App","mode","setMode","useState","colorMode","useMemo","toggleColorMode","prevMode","theme","palette","mapStateToProps","state","myTheme","setTheme","ThemeContext","createContext"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,sBAA3C;AAGA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,KAAK,CAACe,QAAN,CAAe,MAAf,CAAxB;AAEA,QAAMC,SAAS,GAAGhB,KAAK,CAACiB,OAAN,CAChB,OAAO;AACLC,IAAAA,eAAe,EAAE,MAAM;AACrBJ,MAAAA,OAAO,CAAEK,QAAD,IAAeA,QAAQ,KAAK,OAAb,GAAuB,MAAvB,GAAgC,OAAhD,CAAP;AACD;AAHI,GAAP,CADgB,EAMhB,EANgB,CAAlB;AAQA,QAAMC,KAAK,GAAGpB,KAAK,CAACiB,OAAN,CACZ,MACEV,WAAW,CAAC;AACVc,IAAAA,OAAO,EAAE;AACPR,MAAAA,IAAI,EAAEA;AADC;AADC,GAAD,CAFD,EAOZ,CAACA,IAAD,CAPY,CAAd;AASA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEG,SAA9B;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEI,KAAtB;AAAA,8BAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,QAAD;AAAU,YAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,OAAO,eAAE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,WAAZ;AAAwB,UAAA,OAAO,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,WADP;AAEE,UAAA,OAAO,eACL;AAAA,oCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GA3CQR,G;;KAAAA,G;;AA6CT,MAAMU,eAAe,GAAIC,KAAD,IAAgB;AACtC,SAAO;AACLC,IAAAA,OAAO,EAAED,KAAK,CAACE;AADV,GAAP;AAGD,CAJD;;AAKA,OAAO,MAAMC,YAAY,gBAAG1B,KAAK,CAAC2B,aAAN,CAAoB;AAAET,EAAAA,eAAe,EAAE,MAAM,CAAE;AAA3B,CAApB,CAArB;AAEP,eAAejB,OAAO,CAACqB,eAAD,CAAP,CAAyBV,GAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { Navigate } from \"react-router-dom\";\nimport Country from \"./components/country/Country\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport { Paper } from \"@material-ui/core\";\nimport { PaletteType } from \"@material-ui/core\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport FavoriteComp from \"./components/Favorite\";\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\nfunction App() {\n  const [mode, setMode] = React.useState(\"dark\");\n\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === \"light\" ? \"dark\" : \"light\"));\n      },\n    }),\n    []\n  );\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: mode as PaletteType,\n        },\n      }),\n    [mode]\n  );\n  return (\n    <ThemeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        \n          <CssBaseline />\n          <Routes>\n            <Route path='/' element={<Navigate to={\"/home\"}></Navigate>} />\n            <Route path='/home' element={<Home />} />\n            <Route path='/:country' element={<Country />} />\n            <Route\n              path='/favorite'\n              element={\n                <>\n                  <Header />\n                  <FavoriteComp />\n                </>\n              }\n            />\n          </Routes>\n        \n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    myTheme: state.setTheme,\n  };\n};\nexport const ThemeContext = React.createContext({ toggleColorMode: () => {} });\n\nexport default connect(mapStateToProps)(App);\n"]},"metadata":{},"sourceType":"module"}