{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { ADD_FAVORITE, CHANGE_TEXT, CURRENT_COUNTRIES, DEFAULT_COUNTRIES_SPECIFIC, FILTER_COUNTRIES_REGION, FILTER_COUNTRIES_SPECIFIC, REMOVE_FAVORITE, SELECT_COUNTRY } from \"./actions\";\nconst INITIAL_STATE = {\n  favoriteCountries: [],\n  favorites: []\n};\n\nfunction selectCurrentCountries() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case CURRENT_COUNTRIES:\n      return payload;\n\n    case FILTER_COUNTRIES_REGION:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nfunction filterCountriesSpecific() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case FILTER_COUNTRIES_SPECIFIC:\n      let regex = new RegExp(`^${payload.text}`, \"gim\");\n      let filterCountries = payload.countries.filter(c => regex.test(c.name.common));\n      return filterCountries;\n\n    case DEFAULT_COUNTRIES_SPECIFIC:\n      return [];\n\n    default:\n      return state;\n  }\n}\n\nfunction currentCountry() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case SELECT_COUNTRY:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nfunction textToFilter() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case CHANGE_TEXT:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nfunction favoriteCountries() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  // console.log(\"PAYLOAD:\", payload);\n  switch (type) {\n    case ADD_FAVORITE:\n      const favoriteCountries = [...state.favoriteCountries];\n      const favorites = [...state.favorites];\n      favoriteCountries.push(payload);\n      favorites.push(payload.name.common);\n      return { ...state,\n        favoriteCountries,\n        favorites\n      };\n\n    case REMOVE_FAVORITE:\n      const filteredCountries = [...state.favoriteCountries].filter(country => country.name.common !== payload);\n      console.log(\"filteredCountries:\", filteredCountries);\n      const filteredFavorites = [...state.favorites].filter(country => country !== payload);\n      return { ...state,\n        favoriteCountries: filteredCountries,\n        favorites: filteredFavorites\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  selectCurrentCountries,\n  filterCountriesSpecific,\n  currentCountry,\n  textToFilter,\n  favoriteCountries\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/salee/countriesAPIfs9/src/redux/reducers.ts"],"names":["combineReducers","ADD_FAVORITE","CHANGE_TEXT","CURRENT_COUNTRIES","DEFAULT_COUNTRIES_SPECIFIC","FILTER_COUNTRIES_REGION","FILTER_COUNTRIES_SPECIFIC","REMOVE_FAVORITE","SELECT_COUNTRY","INITIAL_STATE","favoriteCountries","favorites","selectCurrentCountries","state","type","payload","filterCountriesSpecific","regex","RegExp","text","filterCountries","countries","filter","c","test","name","common","currentCountry","textToFilter","push","filteredCountries","country","console","log","filteredFavorites","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport {\r\n  ADD_FAVORITE,\r\n  CHANGE_TEXT,\r\n  CURRENT_COUNTRIES,\r\n  DEFAULT_COUNTRIES_SPECIFIC,\r\n  FILTER_COUNTRIES_REGION,\r\n  FILTER_COUNTRIES_SPECIFIC,\r\n  REMOVE_FAVORITE,\r\n  SELECT_COUNTRY,\r\n} from \"./actions\";\r\n\r\nconst INITIAL_STATE = {\r\n  favoriteCountries: [],\r\n  favorites: [],\r\n\r\n};\r\ninterface ICountrie {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\nfunction selectCurrentCountries(\r\n  state = [],\r\n  { type, payload }: { type: string; payload: ICountrie[] }\r\n) {\r\n  switch (type) {\r\n    case CURRENT_COUNTRIES:\r\n      return payload;\r\n    case FILTER_COUNTRIES_REGION:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction filterCountriesSpecific(\r\n  state = [],\r\n  {\r\n    type,\r\n    payload,\r\n  }: { type: string; payload: { text: string; countries: ICountrie[] } }\r\n) {\r\n  switch (type) {\r\n    case FILTER_COUNTRIES_SPECIFIC:\r\n      let regex = new RegExp(`^${payload.text}`, \"gim\");\r\n      let filterCountries = payload.countries.filter((c) =>\r\n        regex.test(c.name.common)\r\n      );\r\n      return filterCountries;\r\n    case DEFAULT_COUNTRIES_SPECIFIC:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\ninterface ICountry {\r\n  flags: string[];\r\n  name: {\r\n    common: string;\r\n    official: string;\r\n    nativeName?: any;\r\n  };\r\n  tld: string[];\r\n  currencies: any;\r\n  capital: string[];\r\n  region: string;\r\n  subregion: string;\r\n  languages?: any;\r\n  borders?: any;\r\n  population: number;\r\n}\r\n\r\nfunction currentCountry(\r\n  state = {},\r\n  { type, payload }: { type: string; payload: ICountry }\r\n) {\r\n  switch (type) {\r\n    case SELECT_COUNTRY:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction textToFilter(\r\n  state = \"\",\r\n  { type, payload }: { type: string; payload: string }\r\n) {\r\n  switch (type) {\r\n    case CHANGE_TEXT:\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction favoriteCountries(\r\n  state = INITIAL_STATE,\r\n  { type, payload }: { type: string; payload: ICountrie }\r\n) {\r\n  // console.log(\"PAYLOAD:\", payload);\r\n  switch (type) {\r\n    case ADD_FAVORITE:\r\n      const favoriteCountries: ICountrie[] = [...state.favoriteCountries];\r\n      const favorites: string[] = [...state.favorites];\r\n      favoriteCountries.push(payload);\r\n      favorites.push(payload.name.common);\r\n      return {\r\n        ...state,\r\n        favoriteCountries,\r\n        favorites,\r\n      };\r\n    case REMOVE_FAVORITE:\r\n      const filteredCountries = [...state.favoriteCountries].filter(\r\n        (country: any) => country.name.common !== payload\r\n      );\r\n      console.log(\"filteredCountries:\",filteredCountries);\r\n\r\n      const filteredFavorites = [...state.favorites].filter(\r\n        (country) => country !== payload\r\n      );\r\n      return {\r\n        ...state,\r\n        favoriteCountries: filteredCountries,\r\n        favorites: filteredFavorites,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  selectCurrentCountries,\r\n  filterCountriesSpecific,\r\n  currentCountry,\r\n  textToFilter,\r\n  favoriteCountries,\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}